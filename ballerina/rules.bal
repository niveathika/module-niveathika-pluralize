import ballerina/lang.regexp;

final map<string> IRREGULAR_PLURAL_RULES = {
    "i": "we",
    "me": "us",
    "he": "they",
    "she": "they",
    "them": "they",
    "myself": "ourselves",
    "yourself": "yourselves",
    "itself": "themselves",
    "herself": "themselves",
    "himself": "themselves",
    "themself": "themselves",
    "is": "are",
    "was": "were",
    "has": "have",
    "this": "these",
    "that": "those",
    "echo": "echoes",
    "dingo": "dingoes",
    "volcano": "volcanoes",
    "tornado": "tornadoes",
    "torpedo": "torpedoes",
    "genus": "genera",
    "viscus": "viscera",
    "stigma": "stigmata",
    "stoma": "stomata",
    "dogma": "dogmata",
    "lemma": "lemmata",
    "schema": "schemata",
    "anathema": "anathemata",
    "ox": "oxen",
    "axe": "axes",
    "die": "dice",
    "yes": "yeses",
    "foot": "feet",
    "eave": "eaves",
    "goose": "geese",
    "tooth": "teeth",
    "quiz": "quizzes",
    "human": "humans",
    "proof": "proofs",
    "carve": "carves",
    "valve": "valves",
    "looey": "looies",
    "thief": "thieves",
    "groove": "grooves",
    "pickaxe": "pickaxes",
    "passerby": "passersby"
};

final map<string> IRREGULAR_SINGULAR_RULES = map from var entry in IRREGULAR_PLURAL_RULES.entries()
    select [entry[1], entry[0]];

// Singular words with no plurals.
final string[] UNCOUNTABLE_RULES = [
    "adulthood",
    "advice",
    "agenda",
    "aid",
    "aircraft",
    "alcohol",
    "ammo",
    "analytics",
    "anime",
    "athletics",
    "audio",
    "bison",
    "blood",
    "bream",
    "buffalo",
    "butter",
    "carp",
    "cash",
    "chassis",
    "chess",
    "clothing",
    "cod",
    "commerce",
    "cooperation",
    "corps",
    "debris",
    "diabetes",
    "digestion",
    "elk",
    "energy",
    "equipment",
    "excretion",
    "expertise",
    "firmware",
    "flounder",
    "fun",
    "gallows",
    "garbage",
    "graffiti",
    "hardware",
    "headquarters",
    "health",
    "herpes",
    "highjinks",
    "homework",
    "housework",
    "information",
    "jeans",
    "justice",
    "kudos",
    "labour",
    "literature",
    "machinery",
    "mackerel",
    "mail",
    "media",
    "mews",
    "moose",
    "music",
    "mud",
    "manga",
    "news",
    "only",
    "personnel",
    "pike",
    "plankton",
    "pliers",
    "police",
    "pollution",
    "premises",
    "rain",
    "research",
    "rice",
    "salmon",
    "scissors",
    "series",
    "sewage",
    "shambles",
    "shrimp",
    "software",
    "species",
    "staff",
    "swine",
    "tennis",
    "traffic",
    "transportation",
    "trout",
    "tuna",
    "wealth",
    "welfare",
    "whiting",
    "wildebeest",
    "wildlife",
    "you",
    "measles",
    "sheep"
];

final regexp:RegExp[] UNCOUNTABLE_RULES_REGEXP = [
    re `(?i:deer$)`, // "deer", "reindeer"
    re `(?i:fish$)`, // "fish", "blowfish", "angelfish"
    re `(?i:pox$)`, // "chickpox", "smallpox"
    re `(?i:[^aeiou]ese$)`, // "chinese", "japanese"
    re `(?i:o[iu]s$)`, // "carnivorous"
    re `(?i:pok[e√©]mon$)`,
    re `(?i:eaux$)`,
    re `[^\u{0000}-\u{007F}]$`
];

final [regexp:RegExp, CaptureGroup, string][] REGULAR_PLURALIZATION_RULES = [
    [re `(?i:thou$)`, NO_MATCH, "you"],
    [re `(?i:(wo|m)[ae]n$)`, FIRST_GROUP_MATCH, "en"],
    [re `(?i:(child)(?:ren)?$)`, FIRST_GROUP_MATCH, "ren"],
    [re `(?i:(pe)(?:rson|ople)$)`, FIRST_GROUP_MATCH, "ople"],
    [re `(?i:((?:tit)?m|l)(?:ice|ouse)$)`, FIRST_GROUP_MATCH, "ice"],
    [re `(?i:(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$)`, FIRST_GROUP_MATCH, "ices"],
    [re `(?i:(x|ch|ss|sh|zz)$)`, FIRST_GROUP_MATCH, "es"],
    [re `(?i:([^ch][ieo][ln])ey$)`, FIRST_GROUP_MATCH, "ies"],
    [re `(?i:([^aeiouy]|qu)y$)`, FIRST_GROUP_MATCH, "ies"],
    [re `(?i:(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$)`, FIRST_GROUP_MATCH, "ves"],
    [re `(?i:(.*)sis$)`, FIRST_GROUP_MATCH, "ses"],
    [re `(?i:(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$)`, FIRST_GROUP_MATCH, "a"],
    [re `(?i:(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$)`, FIRST_GROUP_MATCH, "a"],
    [re `(?i:(her|at|gr)o$)`, FIRST_GROUP_MATCH, "oes"],
    [re `(?i:(seraph|cherub)(?:im)?$)`, FIRST_GROUP_MATCH, "im"],
    [re `(?i:(alumn|alg|vertebr)(?:a|ae)$)`, FIRST_GROUP_MATCH, "ae"],
    [re `(?i:(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i))$`, FIRST_GROUP_MATCH, "i"],
    [re `(?i:([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$)`, FIRST_GROUP_MATCH, ""],
    [re `(?i:(e[mn]u)s?$)`, FIRST_GROUP_MATCH, "s"],
    [re `(?i:(alias|[^aou]us|t[lm]as|gas|ris)$)`, FIRST_GROUP_MATCH, "es"],
    [re `(?i:(ax|test)is$)`, FIRST_GROUP_MATCH, "es"],
    [re `(?i:s?$)`, FULL_MATCH, "s"]
];

final [regexp:RegExp, CaptureGroup, string][] SINGULARIZATION_RULES = [
    [re `(?:(wo|m)en$)`, FIRST_GROUP_MATCH, "an"],
    [re `(?:(eau)x?$)`, FIRST_GROUP_MATCH, ""],
    [re `(?:(child)ren$)`, FIRST_GROUP_MATCH, ""],
    [re `(?:(pe)(rson|ople)$)`, FIRST_GROUP_MATCH, "rson"],
    [re `(?:(matr|append)ices$)`, FIRST_GROUP_MATCH, "ix"],
    [re `(?:(cod|mur|sil|vert|ind)ices$)`, FIRST_GROUP_MATCH, "ex"],
    [re `(?:(alumn|alg|vertebr)ae$)`, FIRST_GROUP_MATCH, "a"],
    [re `(?:(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$)`, FIRST_GROUP_MATCH, "on"],
    [re `(?:(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$)`, FIRST_GROUP_MATCH, "um"],
    [re `(?:(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$)`, FIRST_GROUP_MATCH, "us"],
    [re `(?:(test)(?:is|es)$)`, FIRST_GROUP_MATCH, "is"],
    [re `(?:(movie|twelve|abuse|e[mn]u)s$)`, FIRST_GROUP_MATCH, ""],
    [re `(?:(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$)`, FIRST_GROUP_MATCH, "sis"],
    [re `(?:(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$)`, FIRST_GROUP_MATCH, ""],
    [re `(?:(seraph|cherub)im$)`, FIRST_GROUP_MATCH, ""],
    [re `(?:((?:tit)?m|l)ice$)`, FIRST_GROUP_MATCH, "ouse"],
    [re `(?:(mon|smil)ies$)`, FIRST_GROUP_MATCH, "ey"],
    [re `(?:([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$)`, FIRST_GROUP_MATCH, "ie"],
    [re `(?:(.*)ies$)`, FIRST_GROUP_MATCH, "y"],
    [re `(?:(ar|(?:wo|[ae])l|[eo][ao])ves$)`, FIRST_GROUP_MATCH, "f"],
    [re `(?i:(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$)`, FIRST_GROUP_MATCH, "fe"],
    [re `(?i:(ss|s)$)`, FULL_MATCH, ""]
];

enum CaptureGroup {
    FULL_MATCH,
    FIRST_GROUP_MATCH,
    NO_MATCH
}
